Puli at a Glance
================

Puli_ is a PHP library that manages files, directories and other resources in
a repository - much like a virtual file system. *Resources* can be anything,
but usually we use the term for machine-processed files that are *not* PHP, such
as CSS, JavaScript, XLIFF, YAML, XML or HTML files.

Why Puli?
---------

Many people use Composer_ to distribute their packages. These packages contain
both PHP files and resources that are used by the application. Loading PHP files
is easy, thanks to PSR-4_ and Composer's generated autoloader. Loading resources,
however, requires using absolute file paths with plenty of ``..`` segments or
inventing some sort of naming convention, which varies from project to project:

.. code-block:: jinja

    {% include 'AcmeBlogBundle::footer.html.twig' %}

Puli offers a platform- and framework-agnostic solution to this problem.

Repositories
------------

At its core, Puli provides a simple repository, much like a file system. You can
"mount" files or directories to paths in the repository:

.. code-block:: php

    use Puli\Repository\ResourceRepository;

    $repo = new ResourceRepository();
    $repo->add('/app', '/path/to/project/res');

Here, the *Puli path* ``/app`` is mapped to the directory
``/path/to/project/res``. This allows to to access any file in the ``res``
directory by a Puli path:

.. code-block:: php

    echo $repo->get('/app/views/index.html')->getContents();

The Puli CLI
------------

Usually, you will use `Puli's Command Line Interface`_ (CLI) to generate
repositories instead of creating them by hand. Puli reads a puli.json file from
the root directory of your project:

.. code-block:: json

    {
        "resources": {
            "/app": "res"
        }
    }

The puli.json file allows to map Puli paths to files and directories in your
project. Here, the Puli path ``/app`` is mapped to the directory ``res`` in
the project's root.

With the command ``puli dump``, a resource repository is generated in a PHP
file:

.. code-block:: bash

    $ puli dump

This file can be loaded and used in your PHP code:

.. code-block:: php

    $repo = require __DIR__.'/.puli/resource-repository.php';

    echo $repo->get('/app/views/index.html')->getContents();

Composer Integration
--------------------

Puli offers integration with Composer through its `Composer plugin`_. With this
plugin, all puli.json files of all installed Composer packages are automatically
loaded. For example, assume that the "acme/blog" package is installed and
contains the following puli.json file:

.. code-block:: json

    {
        "resources": {
            "/acme/blog": "res"
        }
    }

The contents of the package's ``res`` directory can then be accessed through
the Puli path ``/acme/blog``:

.. code-block:: php

    $repo = require __DIR__.'/.puli/resource-repository.php';

    echo $repo->get('/acme/blog/views/index.html')->getContents();

Tool Integration
----------------

Puli also provides integration layers for other PHP libraries. The
`Twig extension`_, for example, can be used to refer to other Twig templates via
Puli paths:

.. code-block:: jinja

    {% include '/acme/blog/views/footer.html.twig' %}

The `Symfony bridge`_ permits the use of Puli paths in configuration files:

.. code-block:: yaml

    # routing.yml
    _acme_blog:
        resource: /acme/blog/config/routing.yml

Resource Overriding
-------------------

Consider that you want to change the contents of
``/acme/blog/views/footer.html.twig`` in the "acme/blog" package without
touching that package. With Puli, you can copy the file to your project and
override it in your project's puli.json:

.. code-block:: json

    {
        "resources": {
            "/acme/blog/views/footer.html": "res/views/footer.html"
        },
        "override": "acme/blog"
    }

The file ``res/views/footer.html`` will now be used wherever the file from the
"acme/blog" package is required.

Stream Wrappers
---------------

Did you know PHP's `stream wrapper`_ feature? With Puli's stream wrapper, you
can use Puli repositories like ordinary files:

.. code-block:: php

    use Puli\StreamWrapper\ResourceStreamWrapper;
    use Puli\Uri\UriRepository;

    $repo = require __DIR__.'/.puli/resource-repository.php';

    $uriRepo = new UriRepository();
    $uriRepo->register('puli', $repo);

    ResourceStreamWrapper::register($uriRepo);

In this example, the repository generated by Composer is registered for the
"composer://" scheme. The :class:`Puli\\StreamWrapper\\ResourceStreamWrapper`
class registers this scheme with PHP. Now you can access Puli resources like
normal files, as long as you prefix them with "puli://":

.. code-block:: php

    echo file_get_contents('puli:///acme/blog/trans/en.yml');

Flexibility
-----------

We kept saying "resource" instead of "file" or "directory" because resources
are really independent of the file system. For example, you can implement
custom repositories that load resources from a content management system.
With the :class:`Puli\\Uri\\UriRepository` from the previous example, you can
use both the repository generated by Composer and your own implementation side
by side:

.. code-block:: php

    use My\CmsRepository;
    use Puli\Uri\UriRepository;

    $repo = require 'vendor/resource-repository.php';

    $uriRepo = new UriRepository();
    $uriRepo->register('puli', $repo);
    $uriRepo->register('cms', new CmsRepository());
    $uriRepo->setDefaultScheme('puli');

If you use this repository with the Twig extension, you can simultaneously load
resources from packages and your database now:

.. code-block:: jinja

    {% include 'cms:///ads/sidebar.html.twig' %}

    {% include '/acme/blog/views/footer.html.twig' %}

Further Reading
---------------

* :doc:`components` introduces you to Puli's core components.
* Read :doc:`getting-started` to learn how to install Puli in your project.

.. _Puli: https://github.com/puli/puli
.. _Composer: https://getcomposer.org
.. _PSR-4: http://www.php-fig.org/psr/psr-4/
.. _Puli's Command Line Interface: https://github.com/puli/puli-cli
.. _Composer plugin: https://github.com/puli/puli-composer-plugin
.. _Twig extension: https://github.com/puli/twig-puli-extension
.. _Symfony bridge: https://github.com/puli/symfony-puli-bridge
.. _stream wrapper: http://php.net/manual/en/intro.stream.php
